#include <tmpc/lti/Dare.hpp>
#include <tmpc/Testing.hpp>


namespace tmpc :: testing
{
    TEST(DareTest, testEvaluate)
    {
        blaze::DynamicMatrix<double> const A {
            {8.147236863931789e-01,     9.754040499940952e-02,     1.576130816775483e-01,     1.418863386272153e-01,     6.557406991565868e-01},
            {9.057919370756192e-01,     2.784982188670484e-01,     9.705927817606157e-01,     4.217612826262750e-01,     3.571167857418955e-02},
            {1.269868162935061e-01,     5.468815192049838e-01,     9.571669482429456e-01,     9.157355251890671e-01,     8.491293058687771e-01},
            {9.133758561390194e-01,     9.575068354342976e-01,     4.853756487228412e-01,     7.922073295595544e-01,     9.339932477575505e-01},
            {6.323592462254095e-01,     9.648885351992765e-01,     8.002804688888001e-01,     9.594924263929030e-01,     6.787351548577735e-01},
        };

        blaze::DynamicMatrix<double> const B {
            {7.577401305783334e-01,     7.060460880196088e-01},
            {7.431324681249162e-01,     3.183284637742068e-02},
            {3.922270195341682e-01,     2.769229849608900e-01},
            {6.554778901775566e-01,     4.617139063115394e-02},
            {1.711866878115618e-01,     9.713178123584754e-02},
        };

        blaze::DynamicMatrix<double> const Q {
            {2.734493040818109e+00,     1.885896474870612e+00,     2.078508963026122e+00,     1.944239424328238e+00,     1.956714390631787e+00},
            {1.885896474870612e+00,     2.233984009829927e+00,     2.046070870353660e+00,     2.316445427108925e+00,     2.087488665377289e+00},
            {2.078508963026122e+00,     2.046070870353660e+00,     2.759099147588414e+00,     2.460614573061935e+00,     1.947289382700157e+00},
            {1.944239424328238e+00,     2.316445427108925e+00,     2.460614573061935e+00,     2.584804034018115e+00,     2.276837858360851e+00},
            {1.956714390631787e+00,     2.087488665377289e+00,     1.947289382700157e+00,     2.276837858360851e+00,     2.485316563898650e+00},
        };

        blaze::DynamicMatrix<double> const R {
            {1.126415970670299e+00,     7.843130553271315e-01},
            {7.843130553271315e-01,     5.834932993642777e-01},
        };

        blaze::DynamicMatrix<double> X;

        Dare<double> dare(5, 2);
        dare(A, B, Q, R, X);
        // dare.dump(std::cout);
        
        // Check against the solution obtained with MATLAB's dare() function.
        EXPECT_TRUE(approxEqual(X, blaze::DynamicMatrix<double> {
            {4.124901922184289e+00,     2.857241032445132e+00,     3.106840810022587e+00,     2.997920104991082e+00,     3.182746822491208e+00},
            {2.857241032445132e+00,     3.379818664590152e+00,     3.121182757683871e+00,     3.567849739551920e+00,     3.332728231860177e+00},
            {3.106840810022587e+00,     3.121182757683871e+00,     3.876179757887797e+00,     3.695004404308833e+00,     3.261068589993055e+00},
            {2.997920104991082e+00,     3.567849739551920e+00,     3.695004404308833e+00,     4.001529346265117e+00,     3.733495112144165e+00},
            {3.182746822491208e+00,     3.332728231860177e+00,     3.261068589993055e+00,     3.733495112144165e+00,     4.103198554604887e+00},
        }, 0., 1e-14));

        // Substitute the solution into the Riccati equation and check the residual.
        EXPECT_TRUE(approxEqual(evaluate(trans(A) * X * A - X - trans(A) * X * B * inv(trans(B) * X * B + R) * trans(B) * X * A + Q),
            blaze::ZeroMatrix<double>(5, 5), 1e-12));
    }
}